// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SkincareBookingSystem.DataAccess.DBContext;

#nullable disable

namespace SkincareBookingSystem.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250304173229_MigrationDb_AppointmentDateTimeNotNullable")]
    partial class MigrationDb_AppointmentDateTimeNotNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8fa7c7bb-b4dd-480d-a660-e07a90855d5s",
                            ConcurrencyStamp = "MANAGER",
                            Name = "MANAGER",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "8fa7c7bb-daa5-a660-bf02-82301a5eb32a",
                            ConcurrencyStamp = "ADMIN",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "SkinBookingSystem-Admin",
                            RoleId = "8fa7c7bb-daa5-a660-bf02-82301a5eb32a"
                        },
                        new
                        {
                            UserId = "SkinBookingSystem-Manager",
                            RoleId = "8fa7c7bb-b4dd-480d-a660-e07a90855d5s"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "SkinBookingSystem-Admin",
                            AccessFailedCount = 0,
                            Address = "123 Admin St",
                            Age = 30,
                            ConcurrencyStamp = "13c1bcc1-b8d0-41c4-af2e-78cd54155e30",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            ImageUrl = "https://example.com/avatar.png",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEClOe8fSAnWDKBiSTpWHEeRIvXa22qJQcDqGyCSaCpxEtUjkA4gU2KAz4vIFEpDsPg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "09f03bd9-7668-44d2-add4-4d468379e379",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "SkinBookingSystem-Manager",
                            AccessFailedCount = 0,
                            Address = "123 Manager St",
                            Age = 30,
                            ConcurrencyStamp = "9a6bd1c6-1852-4886-aa74-3bcda87bb4fd",
                            Email = "manager@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Manager",
                            ImageUrl = "https://example.com/avatarManager.png",
                            LockoutEnabled = true,
                            NormalizedEmail = "MANAGER@GMAIL.COM",
                            NormalizedUserName = "MANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGYwOZvTFgHxbFRsycGYacA0uWgduuYO2K2qAfhQGwhzxnLmTdg+ZnH3tuJsfEDHQ==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "61e94526-195f-4be2-8e24-81f4099d3959",
                            TwoFactorEnabled = false,
                            UserName = "manager@gmail.com"
                        });
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Appointments", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AppointmentTime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AppointmentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("OrderId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Blog", b =>
                {
                    b.Property<Guid>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("BlogCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BlogId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogCategoryId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.BlogCategory", b =>
                {
                    b.Property<Guid>("BlogCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BlogCategoryId");

                    b.ToTable("BlogCategory");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.ComboItem", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceComboId")
                        .HasColumnType("uuid");

                    b.HasKey("ServiceId", "ServiceComboId");

                    b.HasIndex("ServiceComboId");

                    b.ToTable("ComboItem");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SkinProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.HasIndex("SkinProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.CustomerSkinTest", b =>
                {
                    b.Property<Guid>("CustomerSkinTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TakeAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CustomerSkinTestId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerSkinTest");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.DurationItem", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceDurationId")
                        .HasColumnType("uuid");

                    b.HasKey("ServiceId", "ServiceDurationId");

                    b.HasIndex("ServiceDurationId");

                    b.ToTable("DurationItem");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Feedbacks", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<long>("OrderNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.ToTable("Order");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ServiceComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uuid");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceComboId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Payment", b =>
                {
                    b.Property<Guid>("PaymentTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("CancelUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("OrderNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("ReturnUrl")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("PaymentTransactionId");

                    b.HasIndex("OrderNumber");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.ServiceCombo", b =>
                {
                    b.Property<Guid>("ServiceComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ComboName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("NumberOfService")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ServiceComboId");

                    b.ToTable("ServiceCombo");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.ServiceDuration", b =>
                {
                    b.Property<Guid>("ServiceDurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer");

                    b.HasKey("ServiceDurationId");

                    b.ToTable("ServiceDurations");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.ServiceType", b =>
                {
                    b.Property<Guid>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ServiceTypeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ServiceTypeId");

                    b.ToTable("ServiceType");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Services", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ServiceId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.SkinProfile", b =>
                {
                    b.Property<Guid>("SkinProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<Guid?>("ParentSkin")
                        .HasColumnType("uuid");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("SkinName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SkinProfileId");

                    b.ToTable("SkinProfile");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.SkinServiceType", b =>
                {
                    b.Property<Guid>("SkinProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SkinTherapistId")
                        .HasColumnType("uuid");

                    b.HasKey("SkinProfileId", "ServiceTypeId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("SkinTherapistId");

                    b.ToTable("SkinServiceType");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.SkinTest", b =>
                {
                    b.Property<Guid>("SkinTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerSkinTestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SkinTestName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SkinTestId");

                    b.HasIndex("CustomerSkinTestId");

                    b.ToTable("SkinTest");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.SkinTherapist", b =>
                {
                    b.Property<Guid>("SkinTherapistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SkinTherapistId");

                    b.HasIndex("UserId");

                    b.ToTable("SkinTherapist");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Slot", b =>
                {
                    b.Property<Guid>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SlotId");

                    b.ToTable("Slot");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Staff", b =>
                {
                    b.Property<Guid>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("StaffCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.TestAnswer", b =>
                {
                    b.Property<Guid>("TestAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<Guid>("TestQuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("TestAnswerId");

                    b.HasIndex("TestQuestionId");

                    b.ToTable("TestAnswer");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.TestQuestion", b =>
                {
                    b.Property<Guid>("TestQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("SkinTestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("TestQuestionId");

                    b.HasIndex("SkinTestId");

                    b.ToTable("TestQuestion");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.TherapistSchedule", b =>
                {
                    b.Property<Guid>("TherapistScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid>("TherapistId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TherapistScheduleId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("SlotId");

                    b.HasIndex("TherapistId");

                    b.ToTable("TherapistSchedules");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.TherapistServiceType", b =>
                {
                    b.Property<Guid>("TherapistId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TherapistId", "ServiceTypeId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("TherapistServiceTypes");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TransactionDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TransactionMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TransactionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.TypeItem", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("ServiceId", "ServiceTypeId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("TypeItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkincareBookingSystem.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Appointments", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkincareBookingSystem.Models.Domain.Customer", null)
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("SkincareBookingSystem.Models.Domain.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Blog", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkincareBookingSystem.Models.Domain.BlogCategory", "BlogCategory")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("BlogCategory");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.ComboItem", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.ServiceCombo", "ServiceCombo")
                        .WithMany("ComboItems")
                        .HasForeignKey("ServiceComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkincareBookingSystem.Models.Domain.Services", "Services")
                        .WithMany("ComboItems")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCombo");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Customer", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.SkinProfile", "SkinProfile")
                        .WithMany()
                        .HasForeignKey("SkinProfileId");

                    b.HasOne("SkincareBookingSystem.Models.Domain.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("SkinProfile");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.CustomerSkinTest", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.Customer", "Customer")
                        .WithMany("CustomerSkinTests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.DurationItem", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.ServiceDuration", "ServiceDuration")
                        .WithMany("DurationItems")
                        .HasForeignKey("ServiceDurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkincareBookingSystem.Models.Domain.Services", "Services")
                        .WithMany("DurationItems")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceDuration");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Feedbacks", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.Appointments", "Appointments")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Order", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.OrderDetail", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkincareBookingSystem.Models.Domain.ServiceCombo", "ServiceCombo")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ServiceComboId");

                    b.HasOne("SkincareBookingSystem.Models.Domain.Services", "Services")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Order");

                    b.Navigation("ServiceCombo");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Payment", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.Order", "Orders")
                        .WithMany()
                        .HasForeignKey("OrderNumber")
                        .HasPrincipalKey("OrderNumber")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Services", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.SkinServiceType", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.ServiceType", "ServiceType")
                        .WithMany("SkinServiceTypes")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkincareBookingSystem.Models.Domain.SkinProfile", "SkinProfile")
                        .WithMany("SkinServiceTypes")
                        .HasForeignKey("SkinProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkincareBookingSystem.Models.Domain.SkinTherapist", null)
                        .WithMany("SkinServiceTypes")
                        .HasForeignKey("SkinTherapistId");

                    b.Navigation("ServiceType");

                    b.Navigation("SkinProfile");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.SkinTest", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.CustomerSkinTest", "CustomerSkinTest")
                        .WithMany("SkinTests")
                        .HasForeignKey("CustomerSkinTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerSkinTest");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.SkinTherapist", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Staff", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.TestAnswer", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.TestQuestion", "TestQuestion")
                        .WithMany()
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.TestQuestion", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.SkinTest", "SkinTest")
                        .WithMany()
                        .HasForeignKey("SkinTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkinTest");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.TherapistSchedule", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.Appointments", "Appointment")
                        .WithMany("TherapistSchedules")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkincareBookingSystem.Models.Domain.Slot", "Slot")
                        .WithMany("TherapistSchedules")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkincareBookingSystem.Models.Domain.SkinTherapist", "SkinTherapist")
                        .WithMany("TherapistSchedules")
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("SkinTherapist");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.TherapistServiceType", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.ServiceType", "ServiceType")
                        .WithMany("TherapistServiceTypes")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkincareBookingSystem.Models.Domain.SkinTherapist", "SkinTherapist")
                        .WithMany("TherapistServiceTypes")
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");

                    b.Navigation("SkinTherapist");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Transaction", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkincareBookingSystem.Models.Domain.Order", "Orders")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("SkincareBookingSystem.Models.Domain.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Orders");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.TypeItem", b =>
                {
                    b.HasOne("SkincareBookingSystem.Models.Domain.Services", "Services")
                        .WithMany("TypeItems")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkincareBookingSystem.Models.Domain.ServiceType", "ServiceType")
                        .WithMany("TypeItems")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Appointments", b =>
                {
                    b.Navigation("TherapistSchedules");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.BlogCategory", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CustomerSkinTests");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.CustomerSkinTest", b =>
                {
                    b.Navigation("SkinTests");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.ServiceCombo", b =>
                {
                    b.Navigation("ComboItems");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.ServiceDuration", b =>
                {
                    b.Navigation("DurationItems");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.ServiceType", b =>
                {
                    b.Navigation("SkinServiceTypes");

                    b.Navigation("TherapistServiceTypes");

                    b.Navigation("TypeItems");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Services", b =>
                {
                    b.Navigation("ComboItems");

                    b.Navigation("DurationItems");

                    b.Navigation("OrderDetails");

                    b.Navigation("TypeItems");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.SkinProfile", b =>
                {
                    b.Navigation("SkinServiceTypes");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.SkinTherapist", b =>
                {
                    b.Navigation("SkinServiceTypes");

                    b.Navigation("TherapistSchedules");

                    b.Navigation("TherapistServiceTypes");
                });

            modelBuilder.Entity("SkincareBookingSystem.Models.Domain.Slot", b =>
                {
                    b.Navigation("TherapistSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
